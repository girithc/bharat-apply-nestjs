// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  email String @unique
  hash  String

  firstName  String
  lastName   String
  middleName String?
  phone Int?

  refreshToken String?

  applications Application[]
  tokens Token[]

  applicationProfile ApplicationProfile?
  classGrade Grade?

  isCollege Boolean @default(false)
  position String?
  colleges College[]

  @@map("users")
}

model ApplicationProfile {
  id        Int      @id @default(autoincrement())
  
  title String?
  firstName String?
  lastName String?
  dateOfBirth DateTime?
  gender String?
  bloodGroup String?

  primaryPhone Int?
  secondaryPhone Int?
  email String?
  agreeToCommunicationsContact Boolean?

  idProof String[]
  idProofLinks String[]

  addressLineOne String?
  addressLineTwo String?
  state String?
  city String?
  country String?
  pinCode Int?
  agreeToCommunicationsAddress Boolean?

  fathersTitle String?
  fathersFirstName String?
  fathersLastName String?
  fathersDateOfBirth String?

  mothersTitle String?
  mothersFirstName String?
  mothersLastName String?
  mothersDateOfBirth String?

  userId Int @unique
  user   User @relation(fields: [userId], references: [id])

  college String[] @default([""])

  @@map("applicationprofiles")
}

model Grade {
  id        Int      @id @default(autoincrement())
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  classTenBoard String?
  classTenExaminationState String?
  classTenExaminationCity String?
  classTenSchoolName String?
  classTenEnrollmentNo Int?
  classTenPassingMonth String?
  classTenPassingYear Int?
  classTenGradeType String?
  classTenMarks Float?
  classTenTotalMarks Float?
  classTenPercentage Float?
  classTenInfoAccurate Boolean? @default(false)

  classTwelveType String?
  classTwelveStatus String?
  classTwelveBoard String?
  classTwelveExaminationState String?
  classTwelveExaminationCity String?
  classTwelveStream String? 
  classTwelveSchoolName String?
  classTwelveSpecialization String?

  classTwelveEnrollmentNo Int? @default(0)
  classTwelvePassingMonth String?
  classTwelvePassingYear Int?
  classTwelveGradeType String?
  classTwelveMarks Float?
  classTwelveTotalMarks Float?
  classTwelvePercentage Float?
  classTwelveInfoAccurate Boolean? @default(false)


  userId Int @unique
  user   User @relation(fields: [userId], references: [id])

  @@map("grades")
}

model College {
  id        Int      @id @default(autoincrement())
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  code String @unique

  city String
  state String
  country String

  userId Int 
  user   User? @relation(fields: [userId], references: [id])

  applications Application[]

}

model Application {
  id        Int      @id @default(autoincrement())
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  description String?
  link        String

  colleges College[]

  userId Int
  user   User? @relation(fields: [userId], references: [id])

  //tokens Token[]

  @@map("applications")
}


model Token {
  id        Int      @id @default(autoincrement())
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  description String?
  link        String?

  userId Int
  user   User? @relation(fields: [userId], references: [id])
  
  //applicationId Int
  //application Application? @relation(fields: [applicationId], references: [id])

  

  prompt String
  response String?

  @@map("tokens")
}