// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  email String @unique
  hash  String

  firstName  String
  lastName   String
  middleName String?

  refreshToken String?

  applications Application[]
  tokens Token[]
  applicationProfile ApplicationProfile?

  @@map("users")
}

model ApplicationProfile {
  id        Int      @id @default(autoincrement())
  
  title String?
  firstName String?
  lastName String?
  dateOfBirth DateTime?
  gender String?
  bloodGroup String?

  primaryPhone Int?
  secondaryPhone Int?
  email String?
  agreeToCommunicationsContact Boolean?

  idProof String[]
  idProofLinks String[]

  addressLineOne String?
  addressLineTwo String?
  state String?
  city String?
  country String?
  pinCode Int?
  agreeToCommunicationsAddress Boolean?

  fathersTitle String?
  fathersFirstName String?
  fathersLastName String?
  fathersDateOfBirth DateTime?

  mothersTitle String?
  mothersFirstName String?
  mothersLastName String?
  mothersDateOfBirth DateTime?

  classGrade Grade?

  userId Int @unique
  user   User @relation(fields: [userId], references: [id])
  

}

model Grade {
  id        Int      @id @default(autoincrement())
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  studentId Int @unique
  student   ApplicationProfile @relation(fields: [studentId], references: [id])

  @@map("grades")
}

model Application {
  id        Int      @id @default(autoincrement())
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  description String?
  link        String

  userId Int
  user   User? @relation(fields: [userId], references: [id])

  //tokens Token[]

  @@map("applications")
}


model Token {
  id        Int      @id @default(autoincrement())
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  description String?
  link        String?

  userId Int
  user   User? @relation(fields: [userId], references: [id])
  
  //applicationId Int
  //application Application? @relation(fields: [applicationId], references: [id])

  

  prompt String
  response String?

  @@map("tokens")
}